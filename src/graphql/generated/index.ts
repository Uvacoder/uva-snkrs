// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run npm run generate to update

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: any;
};


export type Mutation = {
   __typename?: 'Mutation';
  ok: Scalars['Boolean'];
};

export type Query = {
   __typename?: 'Query';
  getSneaker?: Maybe<Sneaker>;
  getSneakers: Array<Sneaker>;
};


export type QueryGetSneakerArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type Sneaker = {
   __typename?: 'Sneaker';
  brand: Scalars['String'];
  colorway: Scalars['String'];
  id: Scalars['ID'];
  imagePublicId: Scalars['String'];
  model: Scalars['String'];
  price: Scalars['Int'];
  purchaseDate: Scalars['DateTime'];
  retailPrice: Scalars['Int'];
  size: Scalars['Float'];
  sold: Scalars['Boolean'];
  soldDate?: Maybe<Scalars['DateTime']>;
  soldPrice?: Maybe<Scalars['Int']>;
};

export type GetSneakerQueryVariables = {
  id: Scalars['ID'];
};


export type GetSneakerQuery = { __typename?: 'Query', getSneaker?: Maybe<{ __typename?: 'Sneaker', id: string, model: string, colorway: string, brand: string, size: number, imagePublicId: string, price: number, retailPrice: number, purchaseDate: any, sold: boolean, soldDate?: Maybe<any>, soldPrice?: Maybe<number> }> };

export type GetSneakersQueryVariables = {};


export type GetSneakersQuery = { __typename?: 'Query', getSneakers: Array<{ __typename?: 'Sneaker', id: string, model: string, colorway: string, brand: string, size: number, imagePublicId: string, price: number, retailPrice: number, purchaseDate: any, sold: boolean }> };


export const GetSneakerDocument = gql`
    query GET_SNEAKER($id: ID!) {
  getSneaker(id: $id) {
    id
    model
    colorway
    brand
    size
    imagePublicId
    price
    retailPrice
    purchaseDate
    sold
    soldDate
    soldPrice
  }
}
    `;

/**
 * __useGetSneakerQuery__
 *
 * To run a query within a React component, call `useGetSneakerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSneakerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSneakerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetSneakerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSneakerQuery, GetSneakerQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSneakerQuery, GetSneakerQueryVariables>(GetSneakerDocument, baseOptions);
      }
export function useGetSneakerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSneakerQuery, GetSneakerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSneakerQuery, GetSneakerQueryVariables>(GetSneakerDocument, baseOptions);
        }
export type GetSneakerQueryHookResult = ReturnType<typeof useGetSneakerQuery>;
export type GetSneakerLazyQueryHookResult = ReturnType<typeof useGetSneakerLazyQuery>;
export type GetSneakerQueryResult = ApolloReactCommon.QueryResult<GetSneakerQuery, GetSneakerQueryVariables>;
export const GetSneakersDocument = gql`
    query GET_SNEAKERS {
  getSneakers {
    id
    model
    colorway
    brand
    size
    imagePublicId
    price
    retailPrice
    purchaseDate
    sold
  }
}
    `;

/**
 * __useGetSneakersQuery__
 *
 * To run a query within a React component, call `useGetSneakersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSneakersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSneakersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSneakersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSneakersQuery, GetSneakersQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSneakersQuery, GetSneakersQueryVariables>(GetSneakersDocument, baseOptions);
      }
export function useGetSneakersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSneakersQuery, GetSneakersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSneakersQuery, GetSneakersQueryVariables>(GetSneakersDocument, baseOptions);
        }
export type GetSneakersQueryHookResult = ReturnType<typeof useGetSneakersQuery>;
export type GetSneakersLazyQueryHookResult = ReturnType<typeof useGetSneakersLazyQuery>;
export type GetSneakersQueryResult = ApolloReactCommon.QueryResult<GetSneakersQuery, GetSneakersQueryVariables>;